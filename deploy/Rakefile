# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require(File.join(File.dirname(__FILE__), 'config', 'boot'))

require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

task :environment do
  require(File.expand_path(File.join(APP_ROOT, 'config', 'environment')))
end

require 'tasks/rails'

module Rake
  module TaskManager
    def redefine_task(task_class, args, &block)
      task_name, deps = resolve_args(args)
      task_name = task_class.scope_name(@scope, task_name)
      deps = [deps] unless deps.respond_to?(:to_ary)
      deps = deps.collect {|d| d.to_s }
      task = @tasks[task_name.to_s] = task_class.new(task_name, self)
      task.application = self
      task.add_comment(@last_comment)
      @last_comment = nil
      task.enhance(deps, &block)
      task
    end
  end
  class Task
    class << self
      def redefine_task(args, &block)
        Rake.application.redefine_task(self, args, &block)
      end
    end
  end
end

def redefine_task(args, &block)
  Rake::Task.redefine_task(args, &block)
end

redefine_task :environment do
  require(File.expand_path(File.join(APP_ROOT, 'config', 'environment')))
end

namespace :db do
  redefine_task :migrate => :environment do
    ActiveRecord::Migration.verbose = ENV["VERBOSE"] ? ENV["VERBOSE"] == "true" : true
    ActiveRecord::Migrator.migrate(File.join(RAILS_ROOT, "db/migrate/"), ENV["VERSION"] ? ENV["VERSION"].to_i : nil)
    Rake::Task["db:schema:dump"].invoke if ActiveRecord::Base.schema_format == :ruby
  end
  namespace :fixtures do
    redefine_task :load => :environment do
      require 'active_record/fixtures'
      ActiveRecord::Base.establish_connection(RAILS_ENV.to_sym)
      (ENV['FIXTURES'] ? ENV['FIXTURES'].split(/,/) : Dir.glob(File.join(RAILS_ROOT, 'test', 'fixtures', '*.{yml,csv}'))).each do |fixture_file|
        Fixtures.create_fixtures(File.join(RAILS_ROOT, 'test/fixtures'), File.basename(fixture_file, '.*'))
      end
    end
  end
end

task :init => [:environment, 'db:create', 'db:migrate'] do
  puts
  puts "Now, test your instance by running the following command:"
  puts 'ruby script/server'
  puts
  puts 'Browse to http://localhost:3000'
  puts 'If you see a login screen, then you are very close!'
  puts 'If not, then something went wrong.'
end

task :update => [:environment, 'db:migrate'] do
  puts
  puts 'System updated.'
end

RAILS_ENV = 'production'