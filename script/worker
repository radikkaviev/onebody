#!/usr/bin/env ruby

# example:
# script/worker -e production

ENV['BUNDLE_GEMFILE'] = File.expand_path('../../Gemfile', __FILE__)
require 'bundler'
Bundler.setup

require 'optparse'
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: script/worker -e environment"
  opts.on("-e", '--environment production', "specify environment (development, production)") do |val|
    options[:environment] = val
  end
  opts.on('-c', '--continuous', 'run continuously (good for running as a daemon)') do
    options[:continuous] = true
  end
  opts.on("--debug") do
    options[:debug] = true
  end
end
parser.parse!

require 'fileutils'
PID_DIR = File.expand_path('../../tmp/pids', __FILE__)
FileUtils.mkdir_p(PID_DIR)

PID_PATH = PID_DIR + '/worker.pid'
MAX_PID_LIFE = 30 * 60 # 30 mins

require 'time'
if File.exist?(PID_PATH)
  if Time.now - File.stat(PID_PATH).mtime > MAX_PID_LIFE
    Process.kill('KILL', File.read(PID_PATH).strip.to_i) rescue nil
    File.delete(PID_PATH)
  else
    puts "already running - delete #{PID_PATH} to force" if options[:debug]
    exit
  end
end

options[:environment] ||= ENV['RAILS_ENV'] || 'development'

File.open(PID_PATH, 'w') { |f| f.write(Process.pid.to_s) }

trap('INT') do
  puts 'Interrupted by user.' if options[:debug]
  File.delete(PID_PATH)
  exit
end

require 'yaml'
require 'erb'
config_data = File.read(File.expand_path('../../config/database.yml', __FILE__))
db_config = YAML.load(ERB.new(config_data).result)[options[:environment]]

ENV["RAILS_ENV"] = options[:environment]

require 'mysql2'

loop do
  db = Mysql2::Client.new(db_config)
  results = db.query("select site_id, id, command from jobs order by created_at")
  
  puts "#{results.count} job(s)" if options[:debug]
  
  if results.count > 0
    require File.expand_path('../../config/environment', __FILE__)
    results.each(as: :array) do |site_id, id, command|
      p [site_id, id, command] if options[:debug]
      logger = Rails.logger
      logger.info "Worker running job #{id} in site #{site_id}..."
      begin
        Site.current = Site.find(site_id)
        cmd = command.gsub(/JOB_ID/, id.to_s)
        logger.info "Worker running command: #{cmd}"
        logger.info eval(cmd)
        puts 'done' if options[:debug]
      rescue => e
        logger.error(e.message)
        backtrace = e.backtrace.is_a?(Array) ? e.backtrace.join("\n") : e.backtrace.to_s
        logger.error(backtrace)
        Notifier.simple_message(Setting.get(:contact, :bug_notification_email), '[OneBody] Worker Error', e.message + "\n\n" + backtrace + "\n\n#{cmd}").deliver_now
        puts e.message if options[:debug]
      ensure
        db.query("delete from jobs where id = %d" % id)
      end
      logger.info "Finished job #{id}."
    end
  elsif options[:debug]
    puts 'No jobs to process.'
  end
  db.close

  break unless options[:continuous]
  sleep 10
end


File.delete(PID_PATH)
