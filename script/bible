#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../config/environment'
require 'cgi'
require 'rexml/document'
require 'rexml/streamlistener'
include REXML

class BibleWebVersionXmlStream
  attr_accessor :books, :verses
  
  def initialize(filename)
    @filename = filename
  end
  
  def parse_verses
    @books = []; @verses = []
    listener = BibleWebVersionXmlListener.new(self)
    parser = Parsers::StreamParser.new(File.new(@filename), listener)
    parser.parse
    clean_verses
  end
  
  def clean_verses
    @verses.each do |verse|
      verse[-2].strip! # text
      verse[-1].strip! # html
    end
    @verses.delete_if { |v| v[-2] == '' }
    nil
  end
end

class BibleWebVersionXmlListener
  BOOKS_ABBR = {
    'Gen'   => 'Genesis',
    'Exod'  => 'Exodus',
    'Lev'   => 'Leviticus',
    'Num'   => 'Numbers',
    'Deut'  => 'Deuteronomy',
    'Josh'  => 'Joshua',
    'Judg'  => 'Judges',
    'Ruth'  => 'Ruth',
    '1Sam'  => '1 Samuel',
    '2Sam'  => '2 Samuel',
    '1Kgs'  => '1 Kings',
    '2Kgs'  => '2 Kings',
    '1Chr'  => '1 Chronicles',
    '2Chr'  => '2 Chronicles',
    'Ezra'  => 'Ezra',
    'Neh'   => 'Nehemiah',
    'Esth'  => 'Esther',
    'Job'   => 'Job',
    'Ps'    => 'Psalms',
    'Prov'  => 'Proverbs',
    'Eccl'  => 'Ecclesiastes',
    'Song'  => 'Song of Solomon',
    'Isa'   => 'Isaiah',
    'Jer'   => 'Jeremiah',
    'Lam'   => 'Lamentations',
    'Ezek'  => 'Ezekiel',
    'Dan'   => 'Daniel',
    'Hos'   => 'Hosea',
    'Joel'  => 'Joel',
    'Amos'  => 'Amos',
    'Obad'  => 'Obadiah',
    'Jonah' => 'Jonah',
    'Mic'   => 'Micah',
    'Nah'   => 'Nahum',
    'Hab'   => 'Habakkuk',
    'Zeph'  => 'Zephaniah',
    'Hag'   => 'Haggai',
    'Zech'  => 'Zechariah',
    'Mal'   => 'Malachi',
    'Matt'  => 'Matthew',
    'Mark'  => 'Mark',
    'Luke'  => 'Luke',
    'John'  => 'John',
    'Acts'  => 'Acts',
    'Rom'   => 'Romans',
    '1Cor'  => '1 Corinthians',
    '2Cor'  => '2 Corinthians',
    'Gal'   => 'Galatians',
    'Eph'   => 'Ephesians',
    'Phil'  => 'Philippians',
    'Col'   => 'Colossians',
    '1Thess'=> '1 Thessalonians',
    '2Thess'=> '2 Thessalonians',
    '1Tim'  => '1 Timothy',
    '2Tim'  => '2 Timothy',
    'Titus' => 'Titus',
    'Phlm'  => 'Philemon',
    'Heb'   => 'Hebrews',
    'Jas'   => 'James',
    '1Pet'  => '1 Peter',
    '2Pet'  => '2 Peter',
    '1John' => '1 John',
    '2John' => '2 John',
    '3John' => '3 John',
    'Jude'  => 'Jude',
    'Rev'   => 'Revelation'
  }
  INDENT_SPACE = '<span class="indent">&nbsp;&nbsp;</span>'
  LINE_BREAK = '<br/>'
  
  include StreamListener
  
  def initialize(stream)
    @stream = stream
  end
  
  def tag_start(name, attributes)
    if name == 'div' and attributes['type'] == 'book'
      if book = BOOKS_ABBR[attributes['osisID']]
        @stream.books << book
        @book = book
      else
        @book = nil
      end
    elsif name == 'verse' and verse = attributes['sID']
      @chapter, @verse = verse.split('.')[1..-1].map { |p| p.to_i } # "Gen.1.1"
    elsif name == 'verse' and attributes['eID']
      @chapter, @verse = nil, nil
    elsif name == 'note'
      @skip_text = true
    elsif name == 'l' and attributes['type'] == "x-secondary"
      @indent = true
    end
  end
  
  def text(content)
    if @book and @chapter and @verse and not @skip_text
      text = BibleWebVersionXmlListener.clean_verse(content)
      html = BibleWebVersionXmlListener.htmlize_verse(BibleWebVersionXmlListener.clean_verse(content))
      if @indent
        html = INDENT_SPACE + html
        @indent = false
      end
      if @stream.verses.any? and @stream.verses.last[0..2] == [@book, @chapter, @verse]
        @stream.verses.last[-2] += text
        @stream.verses.last[-1] += html
      else
        @stream.verses << [@book, @chapter, @verse, text, html]
        print "#{@book} #{@chapter}:#{@verse}                          \r"
      end
    end
  end
  
  def tag_end(name)
    if name == 'note'
      @skip_text = false
    elsif name == 'l' and @stream.verses.any? and @book and @verse
      @stream.verses.last[-1] += LINE_BREAK
    end
  end
  
  class << self
    def clean_verse(verse)
      verse.gsub(/\r?\n/, ' ').gsub(/\s+/, ' ')
    end
    def htmlize_verse(verse)
      CGI.escapeHTML(verse).gsub(/“/, '&#8220;').gsub(/”/, '&#8221;').gsub(/‘/, '&#8216;').gsub(/’/, '&#8217;')
    end
  end
end


if $0 == __FILE__
  require 'fileutils'
  bible = BibleWebVersionXmlStream.new(ARGV.first)
  bible.parse_verses
  chapters = bible.verses.group_by { |v| "#{v[0]}-#{'%03d' % v[1]}" }
  chapters.each do |chapter, verses|
    print "#{chapter}                    \r"
    FileUtils.mkdir_p("app/views/bibles/#{chapter.split('-').first}")
    File.open("app/views/bibles/#{chapter.sub('-', '/')}.erb", 'w') do |file|
      file.write "<div class=\"chapter\" id=\"#{chapter}\">\n"
      book_name = chapter.split('-').first
      book_name = 'Psalm' if book_name == 'Psalms'
      chapter_num = chapter.split('-').last.to_i
      file.write "  <h2>#{book_name} #{chapter_num}</h2>\n"
      verses.each do |verse|
        verse_num = verse[2]
        html = verse[-1]
        file.write("  <span class=\"verse\" title=\"#{book_name} #{chapter_num}:#{verse_num}\" id=\"#{book_name.gsub(/\s/, '_')}-#{chapter_num}-#{verse_num}\">#{html}</span>\n")
      end
      file.write "</div>"
    end
  end
  puts
end
