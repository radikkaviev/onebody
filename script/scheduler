#!/usr/bin/env ruby

RAILS_ROOT = File.expand_path(File.join(File.dirname(__FILE__), '..'))
require File.join(RAILS_ROOT, 'vendor/daemon')

RAILS_ENV = ARGV[1] || 'production'

require 'rubygems'
require 'active_record'
require 'yaml'
require 'time'

config = YAML::load_file(RAILS_ROOT + '/config/database.yml')[RAILS_ENV]
ActiveRecord::Base.establish_connection(config)

if File.exist?(RAILS_ROOT + '/config/initializers/links.rb')
  require RAILS_ROOT + '/config/initializers/links'
end
require RAILS_ROOT + '/config/initializers/paths'
require RAILS_ROOT + '/vendor/plugins/acts_as_file/lib/acts_as_file'
%w(scheduled_task site setting).each { |model| require RAILS_ROOT + "/app/models/#{model}" }

class Scheduler < Daemon::Base
  DELAY  = 15
  MINUTE = 60
  HOUR   = 60 * MINUTE
  DAY    = 24 * HOUR
  NIGHT_HOURS = 0..3
  
  def self.start
    puts "Scheduler started at #{timestamp}"
    puts
    @rails_root = File.expand_path(RAILS_ROOT)
    @rails_env = RAILS_ENV
    loop do
      self.run
      sleep DELAY
    end
  end
  
  def self.run
    now = Time.now
    self.run_tasks_and_inactivate('now')
    if @last_minutely_run.nil? or now >= @last_minutely_run + MINUTE
      self.run_tasks('minutely')
      @last_minutely_run = now
    end
    if @last_hourly_run.nil? or now >= @last_hourly_run + HOUR
      self.run_tasks('hourly') 
      @last_hourly_run = now
    end
    if NIGHT_HOURS.include?(now.hour) and (@last_nightly_run.nil? or now >= @last_nightly_run + DAY)
      self.run_tasks('nightly')
      @last_nightly_run = now
    end
  end
  
  def self.timestamp
    Time.now.strftime('%m/%d/%Y %I:%M:%S %p')
  end

  def self.run_tasks(interval)
    # runner commands
    tasks = ScheduledTask.find_all_by_interval_and_runner_and_active(interval, true, true)
    combined_command = tasks.map do |task|
      command = task.system_command.gsub(/"/, "\\\"")
      task.site ? "Site.current = Site.find(#{task.site_id}); #{command}" : "Site.each { |site| #{command} }"
    end.join('; ')
    if combined_command.any?
      combined_command = "RAILS_ROOT/script/runner -e RAILS_ENV \"#{combined_command}\""
      combined_command.gsub!(/RAILS_ROOT/, @rails_root)
      combined_command.gsub!(/RAILS_ENV/,  @rails_env )
      run_command(tasks.map { |t| t.name }.join(', '), interval, combined_command)
    end
    # plain ol' commands
    ScheduledTask.find_all_by_interval_and_runner_and_active(interval, false, true).each do |task|
      run_command(task.name, interval, task.system_command)
    end
  end
  
  def self.run_command(name, interval, command)
    puts "#{name} (#{interval})"
    puts command
    puts "Running at #{timestamp}..."
    result = system(command)
    puts "Finished at #{timestamp}"
    puts 'Output:'
    puts result.to_s.strip.any? ? result : '(blank)'
    puts
    STDOUT.flush
  end
  
  def self.run_tasks_and_inactivate(interval)
    run_tasks(interval).each { |t| t.update_attribute(:active, false) }
  end
  
  def self.stop
    puts "Scheduler stopped at #{timestamp}"
    puts
  end
end

Scheduler.daemonize(RAILS_ROOT, File.join(RAILS_ROOT, 'log/scheduler.log'))
