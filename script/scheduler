#!/usr/bin/env ruby

RAILS_ROOT = File.expand_path(File.join(File.dirname(__FILE__), '..'))
require File.join(RAILS_ROOT, 'vendor/daemon')

require 'time'

class Scheduler < Daemon::Base
  TASKS_DIR = File.join(RAILS_ROOT, 'db/tasks')
  MINUTE = 60
  HOUR = 60 * MINUTE
  DAY = 24 * HOUR
  NIGHT_HOURS = 0..3
  
  def self.start
    @rails_root = File.expand_path(RAILS_ROOT)
    @rails_env = ARGV[1] || 'production'
    loop do
      self.run
      sleep MINUTE
    end
  end
  
  def self.run
    now = Time.now
    self.run_tasks_and_delete('now')
    self.run_tasks('minutely')
    if @last_hourly_run.nil? or now >= @last_hourly_run + HOUR
      self.run_tasks('hourly') 
      @last_hourly_run = now
    end
    if NIGHT_HOURS.include?(now.hour) and (@last_nightly_run.nil? or now >= @last_nightly_run + DAY)
      self.run_tasks('nightly')
      @last_nightly_run = now
    end
  end
  
  def self.run_task(file)
    File.read(file).split(/\r?\n/).each do |line|
      if line.strip.any? and line.strip !~ /^#/
        puts line.gsub(/RAILS_ROOT/, @rails_root).gsub(/RAILS_ENV/, @rails_env)
        puts system(line.gsub(/RAILS_ROOT/, @rails_root).gsub(/RAILS_ENV/, @rails_env))
        STDOUT.flush
      end
    end
  end
  
  def self.run_tasks(directory)
    Dir[File.join(TASKS_DIR, directory, '*')].each do |file|
      run_task(file) unless file =~ /\.example$/
    end
  end
  
  def self.run_tasks_and_delete(directory)
    run_tasks(directory).each { |f| File.delete f }
  end
  
  def self.stop
    # nothing yet
  end
end

Scheduler.daemonize(RAILS_ROOT, File.join(RAILS_ROOT, 'log/scheduler.log'))
