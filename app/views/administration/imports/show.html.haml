= render 'heading'

- if @import.working?
  .progress.progress-striped.active
    #progress-text.progress-bar.progress-bar-green{ style: "width: #{@import.row_progress}%; min-width:5%" }

  :javascript
    var current_status = #{ json_escape @import.status.to_json };
    var delay = 2000;
    var previousCount = 0;
    function refreshOnStatusChange() {
      $.getJSON('#{administration_import_path(@import, format: :json)}', function(data) {
        if (data.status != current_status) {
          location.reload();
        } else {
          if (previousCount == data.completed_rows_in_stage) {
            delay *= 1.1;
          }
          previousCount = data.completed_rows_in_stage;
          setTimeout(refreshOnStatusChange, delay);
          $('#progress-text').html(
            data.completed_rows_in_stage
          ).css(
            'width',
            data.row_progress + '%'
          )
        }
      });
    }
    setTimeout(refreshOnStatusChange, delay);

.row
  .col-md-4
    .box.box-info
      .box-body
        %table.table.table-no-top-border
          %tr
            %th Filename:
            %td= @import.filename
          - if @import.person
            %tr
              %th By:
              %td= link_to @import.person.name, @import.person
          %tr
            %th Uploaded:
            %td= @import.created_at.to_s(:full)
          %tr
            %th Completed:
            - if @import.completed_at
              %td= @import.completed_at.to_s(:full)
            - else
              %td <em>pending</em>
          - if @import.status_at_least?(:parsed)
            %tr
              %th Rows:
              %td= @import.rows.count
          %tr
            %th Match by:
            %td= t(@import.match_strategy, scope: 'administration.imports.show.match_strategies') # notest
          %tr
            %th Create as Active:
            %td= t(@import.create_as_active?.to_s, scope: 'administration.imports.show.create_as_active') # notest

  .col-md-8
    - if @import.status_at_least?('previewed')
      .box.box-info
        .box-header
          %h3.box-title
            Update Stats
            - unless @import.complete?
              (Pending)
        .box-body
          %table.table
            %thead
              %tr
                %th
                %th People
                %th Families
            %tr
              %td Creates
              %td
                = @import.rows.created_person.count
                = icon 'fa fa-circle text-green'
              %td
                = @import.rows.created_family.count
                = icon 'fa fa-circle text-green'
            %tr
              %td Updates
              %td
                = @import.rows.updated_person.count
                = icon 'fa fa-circle text-yellow'
              %td
                = @import.rows.updated_family.count
                = icon 'fa fa-circle text-yellow'
            %tr
              %td No Change
              %td
                = @import.rows.unchanged_people.count
                = icon 'fa fa-circle text-gray'
              %td
                = @import.rows.unchanged_families.count
                = icon 'fa fa-circle text-gray'


- if @import.status_at_least?('previewed')
  = pagination @rows

  %table.table
    %thead
      %tr
        %th ID
        %th First Name
        %th Last Name
        %th Person Matched
        %th Person Status
        %th Family ID
        %th Family Name
        %th Family Matched
        %th Family Status
    %tbody
      - @rows.each do |row|
        - attrs = row.import_attributes_as_hash(real_attributes: true)
        %tr{ class: row.error_reasons.present? ? 'text-red' : nil }
          %td= row.person ? link_to(row.person_id, row.person) : 'new'
          %td= attrs['first_name']
          %td= attrs['last_name']
          %td= t(row.matched_person_by, scope: 'administration.imports.matched_by', default: '') # notest
          %td= import_row_record_status(row, :person)
          %td= row.family ? link_to(row.family_id, row.family) : 'new'
          %td= attrs['family_name']
          %td= t(row.matched_family_by, scope: 'administration.imports.matched_by', default: '') # notest
          %td= import_row_record_status(row, :family)
        - if row.error_reasons.present?
          %tr.details.text-red
            %td{ colspan: 9 }= row.error_reasons

  = pagination @rows

- if @import.previewed? || @import.destroyable?
  .page-controls
    - if @import.previewed?
      = link_to edit_administration_import_path(@import), class: 'btn btn-warning' do
        = icon 'fa fa-arrow-left'
        Edit Import
      = link_to execute_administration_import_path(@import), class: 'btn btn-danger', |
        data: { method: 'patch', confirm: t('are_you_sure') } do
        = icon 'fa fa-bolt'
        Import Data Now!
    - if @import.destroyable?
      = link_to @import, data: { method: :delete, confirm: t('are_you_sure') }, class: 'btn btn-delete pull-right' do
        = icon 'fa fa-trash-o'
        Delete Import
    .clearfix
