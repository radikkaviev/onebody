<%= form_for [:administration, @report], :html => {:id => 'report_form'} do |form| %>

  <%= error_messages_for(form) %>

  <p>
    <%= form.label :name, I18n.t('name') %>
    <%= form.text_field :name %>
  </p>
  
  <p>
    <%= form.check_box :restricted, :onclick => "toggle_admins()" %>
    <%= form.label :restricted, I18n.t('reporting.restricted'), :class => 'inline' %>
    <span id="restricted_note"><br/><%= I18n.t('reporting.restricted_note') %></span>
  </p>
  
  <fieldset id="admins" style="width:300px;">
    <legend><%= I18n.t('reporting.Admins') %></legend>
    <div style="height:100px;overflow:auto;">
      <% @admins.each do |admin| %>
        <%= check_box_tag 'report[admin_ids][]', admin.id, @report.admin_ids.include?(admin.id), :id => "admin#{admin.id}" %>
        <%= label_tag "admin#{admin.id}", admin.template_name || admin.person.name, :class => 'inline', :style => admin.template_name && 'font-weight:bold;' %><br/>
      <% end %>
    </div>
  </fieldset>
  
  <fieldset>
    <legend><%= I18n.t('reporting.Criteria') %></legend>
    <div id="criteria_root">
      <%= render :partial => "#{@report.definition['collection']}_selector", :collection => @conditions %>
    </div>
    <p>
      <%= link_to_function image_tag('arrow_switch.png', :class => 'icon'), "flip_conjunctions()" %>
      <%= link_to_function I18n.t('reporting.flip_conjunctions'), "flip_conjunctions()" %>
    </p>
  </fieldset>
  
  <fieldset>
    <legend><%= I18n.t('reporting.Sort_Order') %></legend>
    <div id="sort_root">
      <%= render :partial => "sort_attribute", :collection => @report.definition['sort'].to_a %>
    </div>
  </fieldset>
  
  <p>
    <%= form.submit I18n.t('reporting.save_and_run_report') %>
    <%= form.submit I18n.t('reporting.save_and_continue_editing'), :name => 'continue_editing' %>
    <%= link_to I18n.t('reporting.cancel_changes'), administration_reports_path, :class => 'small' %>
  </p>

<% end %>

<p><%= link_to_function I18n.t('reporting.show_tips'), "Element.toggle('tips')" %></p>

<div id="tips" style="display:none;">
  <ul>
    <% I18n.t('reporting.tips').each do |tip| %>
      <li><%= tip %></li>
    <% end %>
  </ul>
</div>

<script type="text/javascript">
  function add_criteria(index) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[selector\]/)+'&add='+(index||'root')+'&preview=selector'}
    );
  }
  
  function add_group(index) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[selector\]/)+'&addgroup='+index+'&preview=selector'}
    );
  }
  
  function move_criteria(index, direction) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[selector\]/)+'&move='+index+'&direction='+direction+'&preview=selector'}
    );
  }
  
  function remove_criteria(index) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[selector\]/)+'&remove='+index+'&preview=selector'}
    );
  }

  function flip_conjunctions() {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[selector\]/)+'&flip=true&preview=true'}
    );
  }
  
  function add_sort(index) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[sort\]/)+'&addsort='+index+'&preview=sort'}
    );
  }
  
  function move_sort(index, direction) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[sort\]/)+'&movesort='+index+'&direction='+direction+'&preview=sort'}
    );
  }
  
  function remove_sort(index) {
    new Ajax.Request(
      '<%= administration_reports_path %>',
      {evalJS:true, asynchronous:true, method:'POST', postBody:serialize_form('report_form', /^report\[sort\]/)+'&removesort='+index+'&preview=sort'}
    );
  }

  // Prototype's Form.serialize loses the order of fields, so here's our own (simple) implementation.
  function serialize_form(id, name_match) {
    return $$('#'+id+' *').select(function(e){
      return (e.tagName.toLowerCase() == 'select' || e.type == 'text' || e.type == 'hidden') && (!name_match || e.name.match(name_match));
    }).map(function(e){
      return encodeURIComponent(e.name)+'='+encodeURIComponent(e.value);
    }).join('&');
  }
  
  people_fields = <%= Report::PEOPLE_FIELDS.inspect %>;
  function get_field_type(field) {
    return people_fields.detect(function(f){ return f[0] == field })[1];
  }
  
  operators_and_types = <%= Report::OPERATORS_AND_TYPES.inspect %>;
  function adjust_operator_and_value(row) {
    var field = $(row).select('.field select')[0].value;
    if(field) {
      var type = get_field_type(field);
      // operator field
      var elm = $(row).select('.operator select')[0];
      var value = elm.value;
      elm.options.length = 0;
      for(var i=0; i<operators_and_types.length; i++) {
        var op = operators_and_types[i];
        if(op.length < 3 || op[2].indexOf(type) > -1) {
          elm.options[elm.options.length] = new Option(op[0], op[1], false, value==op[1]);
        }
      }
      // value field
      adjust_value(row);
    }
  }
  function adjust_value(row) {
    var field = $(row).select('.field select')[0].value;
    if(field) {
      var type = get_field_type(field);
      var operator = $(row).select('.operator select')[0].value;
      var value_td = $(row).select('.value')[0];
      if(['nil', '!nil'].indexOf(operator) > -1) {
        value_td.innerHTML = '<input type="hidden" name="report[selector][][value]"/>';
      } else if(type == 'boolean') {
        value_td.innerHTML = '<select name="report[selector][][value]"><option>true</option><option>false</option></select>';
      } else if(['in', '!in'].indexOf(operator) > -1) {
        value_td.innerHTML = '<input name="report[selector][][value]"/> <em>separate values with vertical pipe |</em>';
      } else {
        value_td.innerHTML = '<input name="report[selector][][value]"/>';
      }
    }
  }
  
  function toggle_admins() {
    if($('report_restricted').checked) {
      Element.show('admins');
      Element.hide('restricted_note');
    } else {
      Element.hide('admins');
      Element.show('restricted_note');
    }
  }
  toggle_admins();
</script>

<style type="text/css">
  table td input {
    margin: 0 !important;
  }
</style>
